plot(fit)
plot(fit, data = df)
p1 = .34
p2 = .31
cov = 120
ratio = 1
N1 = 1000
N2 = ratio * N1
y1 = rbinom(N1, cov, p1)
y2 = rbinom(N2, cov, p1)
df = data.frame(NV = c(y1, y2),
DP = cov,
VAF = c(y1, y2)/cov)
hist(df$VAF, seq(0,1,0.01))
library(bmix)
fit = bmixfit(df, samples = 3)
fit = bmixfit(df, K.Binomials = c(0, 2), K.BetaBinomials = c(0, 1) samples = 3)
fit = bmixfit(df, K.Binomials = c(0, 2), K.BetaBinomials = c(0, 1), samples = 3)
plot(fit, data = df)
p1 = .34
p2 = .31
cov = rbinom(140, .9)
ratio = 1
N1 = 1000
N2 = ratio * N1
y1 = rbinom(N1, cov, p1)
y2 = rbinom(N2, cov, p1)
df = data.frame(NV = c(y1, y2),
DP = cov,
VAF = c(y1, y2)/cov)
hist(df$VAF, seq(0,1,0.01))
fit = bmixfit(df, K.Binomials = c(0, 2), K.BetaBinomials = c(0, 1), samples = 3)
plot(fit, data = df)
df
cov
p1 = .34
p2 = .31
cov = rbinom(140, .9)
p1 = .34
p2 = .31
ratio = 1
N1 = 1000
N2 = ratio * N1
cov = rbinom(N1+N2, 140, .9)
y1 = rbinom(N1, cov, p1)
y2 = rbinom(N2, cov, p1)
df = data.frame(NV = c(y1, y2),
DP = cov,
VAF = c(y1, y2)/cov)
hist(df$VAF, seq(0,1,0.01))
fit = bmixfit(df, K.Binomials = c(0, 2), K.BetaBinomials = c(0, 1), samples = 3)
plot(fit, data = df)
setwd('/Volumes/KINGSTON/')
load("./Data/Eye_Track_Data/R_targetset/targetset_FP.RData")
# load("./Data/Eye_Track_Data/R_targetset/targetset_FP.RData")
load("targetset_FP.RData")
head(targetset)
targetset$FIX
head(targetset)
targetset$participant
tmp = split(targetset, f = targetset$participant)
tmp
tmp[[1]]$FIX
mean(tmp[[1]]$FIX)
tmp[[1]]$REC_ACC
str(targetset)
library(RePsychLing)
# create a factor column for the model
targetset$REC_ACC_label = as.factor(targetset$REC_ACC)
unique(targetset$REC_ACC_label)
levels(targetset$REC_ACC_label) = c("no", "yes")
# create a factor column for the model
targetset$FIX_label = as.factor(targetset$FIX)
unique(targetset$FIX_label)
levels(targetset$FIX_label) = c("no", "yes")
# load("./Data/Eye_Track_Data/R_targetset/targetset_FP.RData")
load("targetset_FP.RData")
targetset$REC_ACC
unique(targetset$REC_ACC_label)
# create a factor column for the model
targetset$REC_ACC_label = as.factor(targetset$REC_ACC)
unique(targetset$REC_ACC_label)
levels(targetset$REC_ACC_label) = c("no", "yes")
unique(targetset$REC_ACC_label)
# create a factor column for the model
targetset$FIX_label = as.factor(targetset$FIX)
unique(targetset$FIX_label)
levels(targetset$FIX_label) = c("no", "yes")
rm(list=ls())
setwd("//chss.datastore.ed.ac.uk/chss/ppls/users/s1515917/Win7/Desktop/PhD_Exp_Psy/Memory_Task")
setwd('/Volumes/KINGSTON/')
# load("./Data/Eye_Track_Data/R_targetset/targetset_FP.RData")
load("targetset_FP.RData")
# create a factor column for the model
targetset$REC_ACC_label = as.factor(targetset$REC_ACC)
unique(targetset$REC_ACC_label)
levels(targetset$REC_ACC_label) = c("no", "yes")
# create a factor column for the model
targetset$FIX_label = as.factor(targetset$FIX)
unique(targetset$FIX_label)
levels(targetset$FIX_label) = c("no", "yes")
targetsetNSA_NSE = subset(targetset, targetset$saliency == "NSA" & targetset$semantic == "NSE")
targetsetSA_NSE = subset(targetset, targetset$saliency == "SA" & targetset$semantic == "NSE")
targetsetNSA_SE = subset(targetset, targetset$saliency == "NSA" & targetset$semantic == "SE")
targetsetSA_SE = subset(targetset, targetset$saliency == "SA" & targetset$semantic == "SE")
##################### prova #######################
dat3 = split(x = targetsetNSA_NSE$REC_ACC[targetsetNSA_NSE$setsize == 3], f = 1:30)
targetsetNSA_NSE$REC_ACC[targetsetNSA_NSE$setsize == 3]
View(targetsetNSA_NSE)
targetsetNSA_NSE
sNSA_NSE = split(targetsetNSA_NSE, f = targetsetNSA_NSE$participant)
sNSA_NSE
lapply(sNSA_NSE, function(x) mean(x$FIX))
df = NULL
sapply(sNSA_NSE, function(x) mean(x$FIX))
df$patient = names(sNSA_NSE)
df
df = data.frame()
df$patient = names(sNSA_NSE)
df = NULL
df = data.frame(patient = names(sNSA_NSE))
df
df$pFIX = sapply(sNSA_NSE, function(x) mean(x$FIX))
View(df)
df$pREC_ACC = sapply(sNSA_NSE, function(x) mean(x$REC_ACC))
str(df)
ggplot(df, aes(x = pFIX, y = pREC_ACC)) +
geom_rug() +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
geom_point()
require(ggplot2)
ggplot(df, aes(x = pFIX, y = pREC_ACC)) +
geom_rug() +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
geom_point()
ggplot(df, aes(x = pFIX, y = pREC_ACC)) +
geom_rug() +
geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
geom_point()
ggplot(df, aes(x = pFIX, y = pREC_ACC)) +
geom_rug() +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
geom_point(alpha = .1)
ggplot(df, aes(x = pFIX, y = pREC_ACC)) +
geom_rug() +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
geom_point(alpha = .1) +
theme_classic(base_size = 10)
??cut
cut(df$pFIX, breaks = seq(0, 1, 0.1))
df$pFIXbin = cut(df$pFIX, breaks = seq(0, 1, 0.1))
df
ggplot(df, aes(x = pFIXbin, y = pREC_ACC)) +
geom_boxplot()
ggplot(df, aes(x = pFIXbin, y = pREC_ACC)) +
geom_boxplot() +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
geom_point(alpha = .1) +
theme_classic(base_size = 10)
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot() +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
geom_point(alpha = .1) +
theme_classic(base_size = 10)
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot() +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
geom_point(alpha = .1) +
geom_jitter()
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot() +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
geom_point(alpha = .1) +
geom_jitter(aes(colour = pFIXbin))
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot() +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
# geom_point(alpha = .1) +
geom_jitter(aes(colour = pFIXbin))
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot() +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
# geom_point(alpha = .1) +
geom_jitter(aes(colour = pFIXbin), size = 2)
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot() +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
# geom_point(alpha = .1) +
geom_jitter(aes(colour = pFIXbin), size = 2, alpha = .3)
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot() +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
# geom_point(alpha = .1) +
geom_jitter(size = 2, alpha = .3)
df$pFIXbin = cut(df$pFIX, breaks = seq(0, 1, 0.01))
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot() +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
# geom_point(alpha = .1) +
geom_jitter(size = 2, alpha = .3)
df$pFIXbin = cut(df$pFIX, breaks = seq(0, 1, 0.2))
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot() +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
# geom_point(alpha = .1) +
geom_jitter(size = 2, alpha = .3)
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot() +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
# geom_point(alpha = .1) +
geom_jitter(size = 3, alpha = .3)
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot() +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
# geom_point(alpha = .1) +
geom_jitter(size = 3, alpha = .3) +
theme_classic(base_size = 10) +
scale_fill_brewer(palette = 'Spectral')
require(ggpubr)
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot() +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
# geom_point(alpha = .1) +
geom_jitter(size = 3, alpha = .3) +
theme_classic(base_size = 10) +
scale_fill_brewer(palette = 'Spectral') +
stat_compare_means()
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot() +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
# geom_point(alpha = .1) +
geom_jitter(size = 3, alpha = .3) +
theme_classic(base_size = 10) +
scale_fill_brewer(palette = 'Spectral') +
stat_compare_means() +
geom_smooth(method = "lm", se=TRUE, aes(group=1))
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot() +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
# geom_point(alpha = .1) +
geom_jitter(size = 3, alpha = .3) +
theme_classic(base_size = 10) +
scale_fill_brewer(palette = 'Spectral') +
stat_compare_means() +
geom_smooth(method = "lm", se=TRUE, aes(group=1)) +
lab(title = "Maccheroni")
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot() +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
# geom_point(alpha = .1) +
geom_jitter(size = 3, alpha = .3) +
theme_classic(base_size = 10) +
scale_fill_brewer(palette = 'Spectral') +
stat_compare_means() +
geom_smooth(method = "lm", se=TRUE, aes(group=1)) +
labs(title = "Maccheroni")
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot() +
geom_jitter(size = 3, alpha = .3) +
theme_classic(base_size = 10) +
scale_fill_brewer(palette = 'Spectral') +
stat_compare_means() +
geom_smooth(method = "lm", se = TRUE, aes(group=1)) +
labs(title = "Maccheroni")
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot(alpha = .3) +
geom_jitter(size = 3, alpha = .3) +
theme_classic(base_size = 10) +
scale_fill_brewer(palette = 'Spectral') +
stat_compare_means() +
geom_smooth(method = "lm", se = TRUE, aes(group=1)) +
labs(title = "Maccheroni")
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot(alpha = .7) +
geom_jitter(size = 3, alpha = .3) +
theme_classic(base_size = 10) +
scale_fill_brewer(palette = 'Spectral') +
stat_compare_means() +
geom_smooth(method = "lm", se = TRUE, aes(group=1)) +
labs(title = "Maccheroni")
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot(alpha = .7) +
geom_jitter(size = 3, alpha = .3) +
theme_classic(base_size = 10) +
scale_fill_brewer(palette = 'Spectral') +
stat_compare_means() +
geom_smooth(method = "lm", se = TRUE, aes(group=1)) +
labs(title = "Maccheroni",
subtitle = 'SS')
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot(alpha = .7) +
geom_jitter(size = 3, alpha = .3) +
theme_classic(base_size = 10) +
scale_fill_brewer(palette = 'Spectral') +
stat_compare_means() +
geom_smooth(method = "lm", se = TRUE, aes(group=1)) +
labs(title = "Maccheroni",
subtitle = 'test for pannacotta')
df$pFIXbin = cut(df$pFIX, breaks = seq(0, 1, 0.1))
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot(alpha = .7) +
geom_jitter(size = 3, alpha = .3) +
theme_classic(base_size = 10) +
scale_fill_brewer(palette = 'Spectral') +
stat_compare_means() +
geom_smooth(method = "lm", se = TRUE, aes(group=1)) +
labs(title = "Maccheroni",
subtitle = 'test for pannacotta')
df$pFIXbin = cut(df$pFIX, breaks = c(0, 0.5, seq(0.5, 1, 0.1)))
df$pFIXbin = cut(df$pFIX, breaks = c(0, 0.5, seq(0.51, 1, 0.1)))
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot(alpha = .7) +
geom_jitter(size = 3, alpha = .3) +
theme_classic(base_size = 10) +
scale_fill_brewer(palette = 'Spectral') +
stat_compare_means() +
geom_smooth(method = "lm", se = TRUE, aes(group=1)) +
labs(title = "Maccheroni",
subtitle = 'test for pannacotta')
df$pFIXbin = cut(df$pFIX, breaks = c(0, 0.499995, seq(0.5, 1, 0.1)))
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot(alpha = .7) +
geom_jitter(size = 3, alpha = .3) +
theme_classic(base_size = 10) +
scale_fill_brewer(palette = 'Spectral') +
stat_compare_means() +
geom_smooth(method = "lm", se = TRUE, aes(group=1)) +
labs(title = "Maccheroni",
subtitle = 'test for pannacotta')
df$pFIXbin = cut(df$pFIX, breaks = c(0, 0.49, seq(0.5, 1, 0.1)))
ggplot(df, aes(x = pFIXbin, y = pREC_ACC, fill = pFIXbin)) +
geom_boxplot(alpha = .7) +
geom_jitter(size = 3, alpha = .3) +
theme_classic(base_size = 10) +
scale_fill_brewer(palette = 'Spectral') +
stat_compare_means() +
geom_smooth(method = "lm", se = TRUE, aes(group=1)) +
labs(title = "Maccheroni",
subtitle = 'test for pannacotta')
setwd('/Volumes/KINGSTON/')
# load("./Data/Eye_Track_Data/R_targetset/targetset_FP.RData")
load("targetset_FP.RData")
# create a factor column for the model
targetset$REC_ACC_label = as.factor(targetset$REC_ACC)
unique(targetset$REC_ACC_label)
levels(targetset$REC_ACC_label) = c("no", "yes")
# keep just observations when the critical object was fixated
targetset = subset(targetset, targetset$FIX == 1)
# ########## GIULIO
head(targetset)
dataset = targetset
View(targetset)
split.dataset = split(
dataset,
f = dataset$participant)
df = data.frame(patient = names(split.dataset))
df$meanTIME_FIRSTFIX = sapply(split.dataset, function(x) mean(x$TIME_FIRSTFIX))
df = data.frame(patient = names(split.dataset))
df$pTIME_FIRSTFIX = sapply(split.dataset, function(x) mean(x$TIME_FIRSTFIX))
df$pREC_ACC = sapply(split.dataset, function(x) mean(x$REC_ACC))
ggplot(df, aes(x = pTIME_FIRSTFIX, y = pREC_ACC)) +
geom_rug() +
geom_point(alpha = .1) +
theme_classic(base_size = 10)
ggplot(df, aes(x = pTIME_FIRSTFIX, y = pREC_ACC)) +
geom_rug() +
geom_point(alpha = .1) +
theme_classic(base_size = 10) +
geom_smooth(method = "lm", se = TRUE, aes(group=1))
targetset
apply(
targetset,
1,
function(x) print(x['saliency'], x['semantic'])
)
apply(
targetset,
1,
function(x) paste(x['saliency'], x['semantic'])
)
targetset$SALSEM = apply(
targetset,
1,
function(x) paste(x['saliency'], x['semantic'])
)
targetset$SALSEM
plotFra(targetset)
plotFra = function(dataset)
{
split.dataset = split(
dataset,
f = dataset$participant)
df = data.frame(patient = names(split.dataset))
df$pTIME_FIRSTFIX = sapply(split.dataset, function(x) mean(x$TIME_FIRSTFIX))
df$pREC_ACC = sapply(split.dataset, function(x) mean(x$REC_ACC))
require(ggplot2)
ggplot(df, aes(x = pTIME_FIRSTFIX, y = pREC_ACC)) +
geom_rug() +
geom_point(alpha = .1) +
theme_classic(base_size = 10) +
geom_smooth(method = "lm", se = TRUE, aes(group=1))
}
plotFra(targetset)
targetset$SALSEM
targetset$SALSEM = factor(targetset$SALSEM)
targetset$SALSEM
split(targetset, f = targetset$SALSEM)
plots = lapply(
split(targetset, f = targetset$SALSEM),
plotFra)
plots
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
quartz()
multiplot(plots)
multiplot(plotlist = plots, cols = 4)
plotFra = function(dataset)
{
split.dataset = split(
dataset,
f = dataset$participant)
df = data.frame(patient = names(split.dataset))
df$pTIME_FIRSTFIX = sapply(split.dataset, function(x) mean(x$TIME_FIRSTFIX))
df$pREC_ACC = sapply(split.dataset, function(x) mean(x$REC_ACC))
require(ggplot2)
ggplot(df, aes(x = pTIME_FIRSTFIX, y = pREC_ACC)) +
geom_rug() +
geom_point(alpha = .1) +
theme_classic(base_size = 10) +
geom_smooth(method = "lm", se = TRUE, aes(group=1)) +
xlim(0, 3000)
}
plots = lapply(
split(targetset, f = targetset$SALSEM),
plotFra)
multiplot(plotlist = plots, cols = 4)
plotFra = function(dataset)
{
split.dataset = split(
dataset,
f = dataset$participant)
df = data.frame(patient = names(split.dataset))
df$pTIME_FIRSTFIX = sapply(split.dataset, function(x) mean(x$TIME_FIRSTFIX))
df$pREC_ACC = sapply(split.dataset, function(x) mean(x$REC_ACC))
require(ggplot2)
ggplot(df, aes(x = pTIME_FIRSTFIX, y = pREC_ACC)) +
geom_rug() +
geom_point(alpha = .1) +
theme_classic(base_size = 10) +
geom_smooth(method = "lm", se = TRUE, aes(group=1)) +
xlim(0, 3000) +
ylim(0, 1)
}
multiplot(plotlist = plots, cols = 4)
plots = lapply(
split(targetset, f = targetset$SALSEM),
plotFra)
multiplot(plotlist = plots, cols = 4)
library(revolver)
data("Breast.fit")
cohort = Breast.fit
setwd("~/Documents/GitHub/revolver.misc/Breast-fit")
for(p in cohort$patients)
{  # revolver_report_fit_patient(cohort, p, cex = 2.5)
quartz(width = 10, height = 5)
par(mfrow = c(1,3))
revolver_plt_fit_patient(cohort, p, cex = 1, file = NA)
revolver_plt_trajectories_patient(cohort, p, cex = 1, file = NA)
revolver_plt_itransfer_patient(cohort, p, cex = 1, file = NA)
dev.copy2pdf(file = paste0(p, '.pdf'))
dev.off()
}
revolver::jamPDF(paste0(cohort$patients, '.pdf'),
out.file = "REVOLVER-Breast-fit.pdf", layout = '1x1',
delete.original = FALSE,
)
