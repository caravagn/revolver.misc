ggraph(graph, layout = 'tree') +
# geom_edge_link(aes(colour = factor(year))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point()  +
geom_node_text(aes(label = name), repel=T)
str(graph)
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
# geom_edge_link(aes(colour = factor(year))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point()  +
geom_node_text(aes(label = name), repel = F)
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
# geom_edge_link(aes(colour = factor(year))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point()  +
geom_node_text(aes(label = name), repel = TRUE)
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
# geom_edge_link(aes(colour = factor(year))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = name))  +
geom_node_text(aes(label = name), repel = TRUE)
treedf
graph <- graph_from_data_frame(treedf, vertices =  c("GL", clones(tree$data)))
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = name))  +
geom_node_text(aes(label = name), repel = TRUE)
V(graph)$color = "red"
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color))  +
geom_node_text(aes(label = name), repel = TRUE)
V(graph)$size = 23
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE)
clone.size = function(data)
{
spl = split(data, f = data$cluster)
vals = sapply(spl, nrow)
data.frame(x = names(spl), size = vals)
}
treedf = revolver:::MatrixToDataFrame(tree$adj_mat)
treedf
V(graph)
clone.size(tree$dataset)
clone.size = function(data)
{
spl = split(data, f = data$cluster)
vals = sapply(spl, nrow)
df = data.frame(x = names(spl), size = vals)
}
clone.size = function(data)
{
spl = split(data, f = data$cluster)
vals = sapply(spl, nrow)
df = data.frame(x = c("GL", names(spl)), size = c(0, vals))
}
clone.size(tree$dataset)
clone.size = function(data)
{
spl = split(data, f = data$cluster)
vals = sapply(spl, nrow)
df = data.frame(x = c("GL", names(spl)), size = c(0, vals))
df
}
clone.size(tree$dataset)
V(graph)$size = clone.size(tree$dataset)
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE)
V(graph)$size = clone.size(tree$dataset)$size
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE)
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE)
graph <- graph_from_data_frame(treedf,
vertices =  c("GL", clones(tree$data)))
V(graph)$color = "red"
V(graph)$size = clone.size(tree$dataset)$size
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE)
clone.size(tree$dataset)$size
V(graph)$size
vals
clone.size = function(data)
{
spl = split(data, f = data$cluster)
vals = c(0, sapply(spl, nrow))
names(vals) = c("GL", names(spl))
# df = data.frame(x = c("GL", names(spl)), size = c(0, vals))
# df
}
treedf = revolver:::MatrixToDataFrame(tree$adj_mat)
graph <- graph_from_data_frame(treedf,
vertices =  c("GL", clones(tree$data)))
V(graph)$color = "red"
clone.size(tree$dataset)
clone.size = function(data)
{
spl = split(data, f = data$cluster)
vals = c(0, sapply(spl, nrow))
names(vals) = c("GL", names(spl))
# df = data.frame(x = c("GL", names(spl)), size = c(0, vals))
# df
vals
}
clone.size(tree$dataset)
V(graph)$color = "red"
V(graph)$size = clone.size(tree$dataset)
V(graph)$color
V(graph)$size
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE)
V(graph)$size = 4
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE)
graph <- graph_from_data_frame(treedf,
vertices =  c("GL", clones(tree$data)))
V(graph)$color = "red"
V(graph)$size = 4
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE)
graph <- graph_from_data_frame(treedf,
vertices =  c("GL", clones(tree$data)))
V(graph)$color = "red"
V(graph)$size = 4
V
graph
treedf = revolver:::MatrixToDataFrame(tree$adj_mat)
graph <- graph_from_data_frame(treedf,
vertices =  c("GL", clones(tree$data)))
V(graph)$color = "red"
V(graph)$size = 4
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE)
graph
V(graph)$size
V(graph)$name
V(graph)$size = runif(12)
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE)
graph <- graph_from_data_frame(treedf,
vertices =  c("GL", clones(tree$data)))
V(graph)$color = "red"
V(graph)$size = runif(12)
V(graph)$name
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE)
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color))  +
geom_node_text(aes(label = name), repel = TRUE)
graph <- graph_from_data_frame(treedf,
vertices =  c("GL", clones(tree$data)))
V(graph)$color = "red"
V(graph)$size =  clone.size(tree$dataset)
,
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
# geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE)
tree$CCF
CCF = tree$CCF
CCF
CCF
CCF = tree$CCF[c('is.driver', 'is.clonal', 'nMuts')]
CCF
nodes.attributes = function(tree, palette = "Set1") {
CCF = tree$CCF[c('is.driver', 'is.clonal', 'nMuts')]
}
CCF$colour = "gainsboro"
nodes.attributes = function(tree, palette = "Set1") {
CCF = tree$CCF[c('is.driver', 'is.clonal', 'nMuts')]
CCF$colour = "gainsboro"
CCF$colour[CCF$is.driver] = "red"
}
nodesdf = nodes.attributes(tree)
nodesdf
nodes.attributes = function(tree, palette = "Set1") {
CCF = tree$CCF[c('is.driver', 'is.clonal', 'nMuts')]
CCF$colour = "gainsboro"
CCF$colour[CCF$is.driver] = "red"
CCF
}
treedf = revolver:::MatrixToDataFrame(tree$adj_mat)
nodesdf = nodes.attributes(tree)
nodesdf
CCF = tree$CCF[c('is.driver', 'is.clonal', 'nMuts')]
CCF
GL = data.frame(is.driver = FALSE, is.clonal = FALSE, nMuts = 0)
GL
CCF = rbind(GL, CCF)
CCF
CCF = tree$CCF[c('is.driver', 'is.clonal', 'nMuts')]
CCF
GL = data.frame(is.driver = FALSE, is.clonal = FALSE, nMuts = 0)
rownames(GL) = "GL"
GL
CCF = rbind(GL, CCF)
CCF
CCF = rbind(GL, CCF)
CCF$colour = "gainsboro"
CCF$colour[CCF$is.driver] = "red"
CCF
CCF = tree$CCF[c('is.driver', 'is.clonal', 'nMuts')]
GL = data.frame(is.driver = FALSE, is.clonal = FALSE, nMuts = 0)
rownames(GL) = "GL"
CCF = rbind(GL, CCF)
CCF
CCF$colour = "gainsboro"
CCF$colour[CCF$is.driver] = "red"
CCF
CCF$colour["GL"]
CCF$colour
CCF$colour[1] = "lightblue"
CCF
nodesdf = nodes.attributes(tree)
nodesdf
nodes.attributes = function(tree, palette = "Set1")
{
CCF = tree$CCF[c('is.driver', 'is.clonal', 'nMuts')]
GL = data.frame(is.driver = FALSE, is.clonal = FALSE, nMuts = 0)
rownames(GL) = "GL"
CCF = rbind(GL, CCF)
# Colours
CCF$colour = "gainsboro"
CCF$colour[CCF$is.driver] = "red"
CCF$colour[1] = "lightblue"
CCF
}
nodesdf = nodes.attributes(tree)
nodesdf
V(graph)$name
nodesdf
graph <- graph_from_data_frame(treedf,
vertices =  rownames(nodesdf)))
nodesdf = nodes.attributes(tree)
graph <- graph_from_data_frame(treedf,
vertices =  rownames(nodesdf)))
graph <- graph_from_data_frame(treedf,
vertices =  rownames(nodesdf))
graph
V(graph)$name
V(graph)$color = nodesdf$colour
V(graph)$size =  nodesdf$nMuts
,
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
# geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE)
CCF
plot(tree)
,
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
# geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE)
nodes.attributes = function(tree, palette = "Set1")
{
CCF = tree$CCF[c('is.driver', 'is.clonal', 'nMuts')]
GL = data.frame(is.driver = FALSE, is.clonal = FALSE, nMuts = 0)
rownames(GL) = "GL"
CCF = rbind(GL, CCF)
# Colours
CCF$colour = "without driver"
CCF$colour[CCF$is.driver] = "with driver"
CCF$colour[1] = "germline"
CCF
}
treedf = revolver:::MatrixToDataFrame(tree$adj_mat)
nodesdf = nodes.attributes(tree)
graph <- graph_from_data_frame(treedf,
vertices =  rownames(nodesdf))
V(graph)$color = nodesdf$colour
V(graph)$size =  nodesdf$nMuts
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
# geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE)
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
# geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE) +
theme_light()
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
# geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE) +
theme_minimal()
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
# geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
# geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = 3) +
theme_void()
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
# geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void() +
scale_edge_color_brewer(palette = 'Dark2')
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
# geom_edge_link(aes(colour = factor(size))) +
# geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void() +
scale_edge_color_brewer(palette = 'Dark2')
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'circlepack') +
# geom_edge_link(aes(colour = factor(size))) +
# geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'circlepack', weight = 'size') +
# geom_edge_link(aes(colour = factor(size))) +
# geom_edge_link(aes(colour = "red")) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
ggraph(graph, 'circlepack', weight = 'size') +
geom_node_circle(aes(fill = depth), size = 0.25, n = 50) +
coord_fixed()
ggraph(graph, 'circlepack') +
geom_node_circle(aes(fill = size), size = 0.25, n = 50) +
coord_fixed()
ggraph(graph, 'circlepack') +
geom_node_circle(aes(fill = size), size = 0.25, n = 50)
E(graph)
E(graph)$color = 'red'
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
# geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = color)) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
graph <- graph_from_data_frame(treedf,
vertices =  rownames(nodesdf))
V(graph)$color = nodesdf$colour
V(graph)$size =  nodesdf$nMuts
E(graph)$color = 'red'
E(graph)
E(graph)$color
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
# geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = color)) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
# geom_edge_link(aes(colour = factor(size))) +
# geom_edge_link(aes(colour = color)) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
E(graph)$color = 'red'
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
# geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = color)) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
treedf = revolver:::MatrixToDataFrame(tree$adj_mat)
nodesdf = nodes.attributes(tree)
graph <- graph_from_data_frame(treedf,
vertices =  rownames(nodesdf))
V(graph)$color = nodesdf$colour
V(graph)$size =  nodesdf$nMuts
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
# geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = color)) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
treedf = revolver:::MatrixToDataFrame(tree$adj_mat)
nodesdf = nodes.attributes(tree)
graph <- graph_from_data_frame(treedf,
vertices =  rownames(nodesdf))
V(graph)$color = nodesdf$colour
V(graph)$size =  nodesdf$nMuts
E(graph)$color = "black"
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'tree') +
# geom_edge_link(aes(colour = factor(size))) +
geom_edge_link(aes(colour = color)) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
cohort$phylogenies$CRUK0001
plots = NULL
plots = NULL
for(tree in cohort$phylogenies$CRUK0001[1:10])
{
nodesdf = nodes.attributes(tree)
graph <- graph_from_data_frame(revolver:::MatrixToDataFrame(tree$adj_mat),
vertices =  rownames(nodesdf))
V(graph)$color = nodesdf$colour
V(graph)$size =  nodesdf$nMuts
E(graph)$color = "black"
pl = ggraph(graph, layout = 'tree') +
geom_edge_link(aes(colour = color)) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
plots = append(plots, list(pl))
}
plots
plots[[3]]
revolver:::multiplot(plotlist = plots)
quartz()
revolver:::multiplot(plotlist = plots, cols = 4)
revolver:::multiplot(plotlist = plots, cols = 3)
for(tree in cohort$phylogenies$CRUK0001[1:4])
plots = NULL
for(tree in cohort$phylogenies$CRUK0001[1:4])
{
nodesdf = nodes.attributes(tree)
graph <- graph_from_data_frame(revolver:::MatrixToDataFrame(tree$adj_mat),
vertices =  rownames(nodesdf))
V(graph)$color = nodesdf$colour
V(graph)$size =  nodesdf$nMuts
E(graph)$color = "black"
pl = ggraph(graph, layout = 'tree') +
geom_edge_link(aes(colour = color)) +
geom_node_point(aes(colour = color, size = size))  +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
plots = append(plots, list(pl))
}
revolver:::multiplot(plotlist = plots, cols = 2)
